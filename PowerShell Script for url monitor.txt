‚úÖ Email Throttling Strategy
We‚Äôll:

Send an email only once during a continuous failure window.

Reset the alert flag once the URL is back up.

üõ† Updated PowerShell Script (with Email Throttling)
powershell
Copy
Edit
# --- Configuration ---

$url = "https://example.com"
$logFile = "C:\Logs\url_monitor_log.txt"

# Email settings
$smtpServer = "smtp.gmail.com"
$smtpPort = 587
$from = "yourname@gmail.com"
$to = "admin@example.com"
$subjectPrefix = "URL Monitor Alert:"
$username = "yourname@gmail.com"
$password = "your_app_password"

$securePassword = ConvertTo-SecureString $password -AsPlainText -Force
$cred = New-Object System.Management.Automation.PSCredential($username, $securePassword)

# Create log directory if needed
$logFolder = [System.IO.Path]::GetDirectoryName($logFile)
if (!(Test-Path -Path $logFolder)) {
    New-Item -ItemType Directory -Path $logFolder -Force
}

# Log function
function Write-Log {
    param ([string]$message)
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    "$timestamp - $message" | Out-File -FilePath $logFile -Append
    Write-Host "$timestamp - $message"
}

# Email alert function
function Send-Alert {
    param (
        [string]$body,
        [string]$subject = "$subjectPrefix $url is DOWN"
    )

    Send-MailMessage -From $from -To $to -Subject $subject -Body $body `
        -SmtpServer $smtpServer -Port $smtpPort -UseSsl -Credential $cred
}

# --- Email Throttling Flag ---
$emailSent = $false

# --- Monitoring Loop ---

while ($true) {
    try {
        $startTime = Get-Date
        $response = Invoke-WebRequest -Uri $url -TimeoutSec 10 -UseBasicParsing
        $endTime = Get-Date
        $elapsed = ($endTime - $startTime).TotalMilliseconds

        if ($response.StatusCode -eq 200) {
            Write-Log "SUCCESS: $url is UP - StatusCode: 200 - ResponseTime: ${elapsed}ms"
            # Reset email alert flag
            if ($emailSent) {
                Write-Log "INFO: Site recovered. Resetting email alert flag."
                $emailSent = $false
            }
        } else {
            $msg = "WARNING: $url returned StatusCode: $($response.StatusCode)"
            Write-Log $msg
            if (-not $emailSent) {
                Send-Alert -body $msg
                $emailSent = $true
                Write-Log "ALERT: Email sent for status code issue."
            }
        }
    }
    catch {
        $errMsg = "ERROR: Unable to reach $url - $_"
        Write-Log $errMsg
        if (-not $emailSent) {
            Send-Alert -body $errMsg
            $emailSent = $true
            Write-Log "ALERT: Email sent for unreachable URL."
        }
    }

    Start-Sleep -Seconds 60
}
‚úÖ What This Does:
Sends one email per incident.

Once the site recovers (200 OK), it resets the flag so future failures will trigger alerts again.

üîí Bonus (Secure Credential Storage):
Let me know if you want to store SMTP credentials securely using Windows Credential Manager or a vault instead of plain text.

Would you like this script packaged for Task Scheduler or as a Windows service?









You said:
Convert this into a Windows Service or Scheduled Task


ChatGPT said:
Perfect! You have two solid options to run this URL monitor automatically:

‚úÖ Option 1: Scheduled Task (Recommended for Simplicity)
üîß Steps to Set Up via Task Scheduler:
Save Script as .ps1

Example: C:\Scripts\Monitor-URL.ps1

Open Task Scheduler

Press Win + S, type Task Scheduler, and open it.

Create Basic Task

Name: MonitorURL

Trigger: Daily ‚Üí Repeat every 1 minute (advanced settings)

Action: Start a Program

Start a Program Details:

Program/script: powershell.exe

Add arguments:

bash
Copy
Edit
-ExecutionPolicy Bypass -File "C:\Scripts\Monitor-URL.ps1"
Enable Advanced Trigger:

After creation, open task properties ‚Üí Triggers tab ‚Üí Edit

Set to repeat every 1 minute for a duration of 1 day

Tick ‚ÄúEnabled‚Äù

Test:

Run it manually from Task Scheduler ‚Üí Check logs

‚úÖ Option 2: Run as a Windows Service (Advanced Option)
Running a PowerShell script as a true Windows Service requires a wrapper.

üîß Tool: NSSM ‚Äì Non-Sucking Service Manager
üõ† Steps:
Download NSSM:

Go to https://nssm.cc/download

Extract and place nssm.exe somewhere in PATH (e.g., C:\Windows)

Open Command Prompt as Admin

Install the Service:

bash
Copy
Edit
nssm install URLMonitorService
In NSSM GUI:

Application:

Path: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe

Arguments:

bash
Copy
Edit
-ExecutionPolicy Bypass -File "C:\Scripts\Monitor-URL.ps1"
Click Install service

Start the Service:

bash
Copy
Edit
net start URLMonitorService
Check Logs & Status:

Logs saved in the .txt file you configured ($logFile)

‚ö†Ô∏è Tips for Either Option
Run PowerShell as Administrator to avoid permission issues.

If using Gmail, ensure your SMTP settings use App Passwords.

Use Write-EventLog instead of just file logging if you prefer Windows Event Viewer logs.

Would you like:

A .bat file to automatically install this as a service?

To turn this into an EXE for portability?

A version that uses Windows Credential Manager for storing email credentials securely?

Let me know what you prefer!








